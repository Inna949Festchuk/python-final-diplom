services:

  app:
    build:
      context: .
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_ENGINE: ${DB_ENGINE}
      DB_NAME: ${DB_NAME}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    entrypoint: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./:/app
    ports:
      - "8000:8000"  # Добавляем проброс порта
    depends_on:
      celery:
        condition: service_started
      broker:
        condition: service_healthy
      # db:
      #   condition: service_healthy
    networks:
      - backend-network
      
  broker:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - backend-network

  celery:
    build:
      context: .
    entrypoint: python -m celery -A netology_pd_diplom worker
    volumes:
      - ./:/app
    depends_on:
      # db:
      #   condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge


  # broker:
  #   image: rabbitmq:4-management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #   healthcheck:
  #       test: ["CMD", "rabbitmqctl", "status"]
  #       interval: 5s
  #       timeout: 5s
  #       retries: 3
  #   networks:
  #     - backend-network

  # db:
  #   image: postgres:15.3
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}

  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #   networks:
  #     - backend-network
